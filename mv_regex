#!/usr/bin/env python3
"""mv_regex
  Rename files using regular expressions. The program will prompt the user for
  confirmation before renaming (unless the "--force" options is used).

Usage:
  mv_regex [options] <search> <replace> <files>...

Arguments:
  <search>    Regular expression to search.
  <replace>   Regular expression to use as replace.
  <files>     List of files on which to do the replacement.

Options:
  -h --help   Show help.
  --version   Show version.
  -f --force  Force move, don't prompt for user interaction.

Copyright:
  T.W.J. de Geus
  tom@geus.me
  www.geus.me
"""

import sys,os,re,time,subprocess
from docopt import docopt

# parse command-line options/arguments
args = docopt(__doc__,version='0.1.1')

# ==============================================================================

def confirm(message='Proceed [y/n]?\n'):
  while True:
    user = input(message)
    if not user                     : print('Please enter y or n.'); continue
    if user not in ['y','Y','n','N']: print('Please enter y or n.'); continue
    if user     in ['y','Y'        ]: return True
    if user     in ['n','N'        ]: return False

# ==============================================================================

# check
for file in args['<files>']:
  if not os.path.isfile(file) and not os.path.isdir(file):
    print('Input {1:s} does not exist'.format(file))
    sys.exit(1)

# reduce to matching files
args['<files>'] = [file for file in args['<files>'] if re.match(args['<search>'],file)]

# rename
args['renamed'] = [re.sub(args['<search>'],args['<replace>'],file) for file in args['<files>']]

# exit
if len(args['renamed'])==0:
  sys.exit(0)

# prompt
if not args['--force']:
  w = max([len(file) for file in args['<files>']])
  fmt = 'mv {file:'+str(w)+'s} {new:s}'
  for file,new in zip(args['<files>'],args['renamed']):
    print(fmt.format(file=file,new=new))
  if not confirm():
    sys.exit(1)

# rename
for file,new in zip(args['<files>'],args['renamed']):
  os.rename(file,new)

