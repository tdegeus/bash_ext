#!/usr/bin/env python3
'''pstat
  List memory usage per process.

Usage:
  pstat [options]
  pstat [options] [--user=N...] [--pid=N...] [--sort=N...]

Options:
  -U                     Limit jobs to the current user.
  -u, --user=<NAME>      Limit jobs to a certain user (may be a regex).
  -p, --pid=<NAME>       Limit jobs to a certain process-id (may be a regex).
  -s, --sort=<NAME>      Sort by field (selected by the header-name).
  -r, --reverse          Reverse sort [default: False].
      --output=<NAME>    Select output columns.
      --no-header        Suppress header, for easy parsing.
      --list             Print column as list.
      --sep=<NAME>       Column separator. [default:  ] (space)
  -h, --help             Show help.
      --version          Show version.

Copyright:
  T.W.J. de Geus
  tom@geus.me
  www.geus.me
'''

# ========================================= LOAD LIBRARIES =========================================

import subprocess, shutil, docopt, pwd, os, sys, time, re

# ================================== CLASS TO REPRESENT A NUMBER ===================================

class Number:
  r'''
Class to represent a number.

This class can also deal with non-numeric input, it allows to input e.g. "N/A".
  '''

  # ------------------------------------------- __init__ -------------------------------------------

  def __init__(self,data):

    self.data = data

  # ------------------------------------------- __int__ --------------------------------------------

  def __int__(self):

    if type(self.data) == int  : return     self.data
    if type(self.data) == float: return int(self.data)

    return 0

  # ------------------------------------------ __float__ -------------------------------------------

  def __float__(self):

    if type(self.data) == float: return       self.data
    if type(self.data) == int  : return float(self.data)

    return 0.0

  # -------------------------------------------- __lt__ --------------------------------------------

  def __lt__(self,other):

    if isinstance(other,Number):

      if type(self.data)  == str and type(other.data) == str: return self.data < other.data
      if type(self.data)  == str: return -1
      if type(other.data) == str: return  0

      return float(self) < float(other)

    if type(self.data) == str: return -1

    return float(self) < float(other)

  # ------------------------------------------ __format__ ------------------------------------------

  def __format__(self,fmt):

    return ('{0:'+fmt+'}').format(str(self))

  # ------------------------------------------- __len__ --------------------------------------------

  def __len__(self):

    return len(str(self))

  # ------------------------------------------- __repr__ -------------------------------------------

  def __repr__(self):

    return self.__str__()

  # ------------------------------------------- __str__ --------------------------------------------

  def __str__(self):

    if type(self.data) == str: return self.data

    return str(self.data)

# ======================== CHILD-CLASS TO REPRESENT A DURATION IN SECTIONS =========================

class Duration(Number):
  r'''
Class to represent a duration in seconds as e.g. "3h".

Any non-numeric value will be kept as-is, through the parent-class "Number".
  '''

  # ------------------------------------------- __str__ --------------------------------------------

  def __str__(self):

    if type(self.data) == str: return self.data

    secs = [60*60*24, 60*60, 60, 1]
    name = ['d', 'h', 'm', 's']

    for i,txt in zip(secs,name):
      if abs(self.data) >= i:
        n = float(self.data)/float(i)
        if abs(round(n)) < 10.: return '%.1f%s'%(      n ,txt)
        else                  : return '%.0f%s'%(round(n),txt)

    return '%.0fs'%float(self.data)

# =========================== CHILD-CLASS TO REPRESENT A MEMORY IN BYTES ===========================

class Memory(Number):
  r'''
Class to represent memory in bytes as e.g. "4G"

Any non-numeric value will be kept as-is, through the parent-class "Number".
  '''

  # ------------------------------------------- __str__ --------------------------------------------

  def __str__(self):

    if type(self.data) == str: return self.data

    byte = [1e12, 1e9, 1e6, 1e3, 1]
    name = ['T', 'G', 'M', 'K', 'B']

    for i,txt in zip(byte,name):
      if abs(self.data) >= i:
        n = float(self.data)/float(i)
        return '%.0f%s'%(round(n),txt)

    return '-'

# ============================= CHILD-CLASS TO REPRESENT A PERCENTAGE ==============================

class Percentage(Number):
  r'''
Class to represent a percentage, with precision 2.

Any non-numeric value will be kept as-is, through the parent-class "Number".
  '''

  # ------------------------------------------- __str__ --------------------------------------------

  def __str__(self):

    if type(self.data) == str: return self.data

    return '%4.1f' % self.data

# ========================================== MAIN PROGRAM ==========================================

# --------------------------- support function: raise command line error ---------------------------

def Error(msg,exit_code=1):
  print(msg)
  sys.exit(exit_code)

# --------------------------------- parse command line interaction ---------------------------------

# parse command-line options
args = docopt.docopt(__doc__,version='0.0.1')

# handle 'alias' options
if args['-U']: args['--user'] += [ pwd.getpwuid( os.getuid() )[ 0 ] ]

# rename fields
args['USER'] = args.pop('--user')
args['PID' ] = args.pop('--pid' )

# squeue headers -> custom headers
alias = {
  'USER'   :'USER'   ,
  'PID'    :'PID'    ,
  'RSS'    :'MEM'    ,
  '%CPU'   :'%CPU'   ,
  'COMMAND':'COMMAND',
}

# custom headers -> squeue headers
aliasInv = {alias[key]:key for key in alias}

# -------------------------------------- process information ---------------------------------------

# read process information
cmd  = 'ps -eo pid,user,rss,%cpu,command'
data = subprocess.check_output(cmd,shell=True).decode('utf-8')

# extract the header and the jobs
header,data = data.split('\n',1)
data        = list(filter(None,data.split('\n')))
header      = list(filter(None,header.split(' ')))

# convert to list of dictionaries
# - initialize
jobs = []
# - loop over jobs
for job in data:
  # -- decode line with information
  fields        = ['' for i in header]
  job           = job.strip()
  fields[0],job = job.split(' ',1)
  job           = job.strip()
  fields[1],job = job.split(' ',1)
  job           = job.strip()
  fields[2],job = job.split(' ',1)
  job           = job.strip()
  fields[3],job = job.split(' ',1)
  fields[4]     = job.strip()
  # -- initialize empty dictionary
  info = {}
  # -- fill dictionary
  for key,val in zip(header,fields):
    info[key] = val
  # -- store to list of jobs
  jobs += [info]

# limit based on command-line options
for key in ['USER','PID']:
  if args[key]:
    jobs = [job for job in jobs if sum([1 if re.match(name,job[key]) else 0 for name in args[key]])]

# -------------------------------- convert type of relevant fields ---------------------------------

# loop over all jobs
for job in jobs:

  # convert number in float
  for key in ['%CPU']:
    job[key] = Percentage(float(job[key]))

  # convert number in kb to memory
  for key in ['RSS']:
    job[key] = Memory(float(job[key])*1.e3)

# ---------------------------------------------- sort ----------------------------------------------

if args['--sort']:
  for key in args['--sort']:
    jobs = sorted(jobs, key=lambda job: job[aliasInv[key.upper()]], reverse=args['--reverse'])
else:
  jobs = sorted(jobs, key=lambda job: job[aliasInv['MEM']], reverse=args['--reverse'])

# ------------------- support function: convert column settings to print format --------------------

def field2fmt(key,width,align,color=None,header=False,**kwargs):

  if header: fmt = '{%s:%s%d.%ds}'%(key,'<',width,width)
  else     : fmt = '{%s:%s%d.%ds}'%(key,align,width,width)

  if color: fmt = '\x1b[%sm'%color+fmt+'\x1b[0m'

  return fmt

# --------------------------------- compute + create print format ----------------------------------

# initialize
# ----------

# width == minimum width, real == real width (computed below)
fields = [
  {'key':'PID'    ,'width':3 ,'real':0,'align':'>'},
  {'key':'USER'   ,'width':7 ,'real':0,'align':'<'},
  {'key':'RSS'    ,'width':4 ,'real':0,'align':'>'},
  {'key':'%CPU'   ,'width':4 ,'real':0,'align':'>'},
  {'key':'COMMAND','width':10,'real':0,'align':'<'},
]

# adjust fields and their width
# -----------------------------

# add color for selection
for field in fields:
  if field['key'] in args:
    if args[field['key']]:
      field['color'] = '1;32;40'

# get the terminal size
cols,_ = shutil.get_terminal_size()

# get the cumulative minimum size of the columns (+ spacing between the columns)
if True:                       fields[0]['total'] = fields[0  ]['width']
for i in range(1,len(fields)): fields[i]['total'] = fields[i-1]['total'] + fields[i]['width'] + 1

# truncate at terminal size
fields = [field for field in fields if field['total'] <= cols]

# get actual width
for job in jobs:
  for field in fields:
    field['real'] = max(field['real'],len(job[field['key']]))

# get the available size to expand
room = cols - fields[-1]['total']

# expand minimum width, as long there is room
# - distinguish priorities for expanding
low  = ['NAME']
high = [field['key'] for field in fields if field['key'] not in low]
# - expand
for prio in [high,low]:
  for field in fields:
    if field['key'] not in prio: continue
    if room <= 0: break
    dw = min(field['real']-field['width'],room)
    if dw <= 0: continue
    field['width'] += dw
    room           -= dw

# convert to print format
# -----------------------

head = args['--sep'].join([field2fmt(**field,header=True ) for field in fields])
fmt  = args['--sep'].join([field2fmt(**field,header=False) for field in fields])

# ------------------------------------- print result to screen -------------------------------------

# header
if not args['--no-header']:
  print(head.format(**{field['key']:alias[field['key' ]] for field in fields}))
  print(head.format(**{field['key']:'='*  field['width'] for field in fields}))

# jobs
for job in jobs: print(fmt.format(**job))
