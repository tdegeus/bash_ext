#!/usr/bin/env python3
"""ls_regex
  Remove files using regular expressions. The program will prompt the user for
  confirmation before removing (unless the "--force" options is used).

Usage:
  ls_regex [options] <search> <files>...

Arguments:
  <search>        Regular expression to search.
  <files>         List of files on which to do the replacement.

Options:
  -d, --dirname   Rename directory name (not the file-name).
  -h, --help      Show help.
      --version   Show version.

Example:
  ls_regex "(.*)(_raw.svg)" *.svg

Copyright:
  T.W.J. de Geus
  tom@geus.me
  www.geus.me
"""

import sys, os, re, docopt

args = docopt.docopt(__doc__,version='0.1.1')

# ==================================================================================================

def confirm(message='Proceed [y/n]?\n'):
  while True:
    user = input(message)
    if not user                     : print('Please enter y or n.'); continue
    if user not in ['y','Y','n','N']: print('Please enter y or n.'); continue
    if user     in ['y','Y'        ]: return True
    if user     in ['n','N'        ]: return False

# ==================================================================================================

# check if all input files actually exist
for file in args['<files>']:
  if not os.path.isfile(file) and not os.path.isdir(file):
    print('Input {1:s} does not exist'.format(file))
    sys.exit(1)

# select directory name
if args['--dirname']: args['<files>'] = [os.path.split(file)[0] for file in args['<files>']]

# only keep input files that match the input regular-expression
args['<files>'] = [file for file in args['<files>'] if re.match(args['<search>'],file)]

# print
for file in args['<files>']:
  print(file)

